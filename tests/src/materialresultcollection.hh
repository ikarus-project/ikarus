// SPDX-FileCopyrightText: 2021-2024 The Ikarus Developers mueller@ibb.uni-stuttgart.de
// SPDX-License-Identifier: LGPL-3.0-or-later

#pragma once

#include <Eigen/Core>

#include <ikarus/finiteelements/mechanics/materials.hh>
#include <ikarus/utils/makeenum.hh>

using namespace Ikarus;
using namespace Ikarus::Materials;

MAKE_ENUM(DeformationType, Undeformed, UniaxialTensile, BiaxialTensile, PureShear, Random);

template <typename ST, typename FD, typename SD>
auto initializeMaterialResults() {
  return std::make_tuple(ST{0.0}, FD::Zero().eval(), SD::Zero().eval());
}

template <DeformationType def>
auto BlatzKoResults() {
  using DEV                              = BlatzKo;
  using ST                               = typename DEV::ScalarType;
  using FD                               = typename DEV::FirstDerivative;
  using SD                               = typename DEV::SecondDerivative;
  auto [energy, stresses, tangentModuli] = initializeMaterialResults<ST, FD, SD>();

  if constexpr (def == DeformationType::UniaxialTensile) {
    energy = 54.55868719697373328361;
    stresses << 136.41067562485586381955, -173.22955867865045161471, -173.22955867865045161471;
    tangentModuli << 241.07277829175228635987, 341.74306308670438274751, 341.74306308670438274751,
        341.74306308670438274751, 2455.04000000000000000000, 548.00000000000000000000, 341.74306308670438274751,
        548.00000000000000000000, 2455.04000000000000000000;
  } else if constexpr (def == DeformationType::BiaxialTensile) {
    energy = 317.66809639394746656721;
    stresses << 136.41067562485586381955, 136.41067562485586381955, -1893.98250024360000000000;
    tangentModuli << 241.07277829175228635987, 213.11737439394746656721, 548.00000000000000000000,
        213.11737439394746656721, 241.07277829175228635987, 548.00000000000000000000, 548.00000000000000000000,
        548.00000000000000000000, 18446.56735082885136000000;
  } else if constexpr (def == DeformationType::PureShear) {
    energy = 81.93868719697373328361;
    stresses << 136.41067562485586381955, 0.00000000000000000000, -480.54120000000000000000;
    tangentModuli << 241.07277829175228635987, 291.97080291970802919708, 400.00000000000000000000,
        291.97080291970802919708, 1200.00000000000000000000, 548.00000000000000000000, 400.00000000000000000000,
        548.00000000000000000000, 4885.64577600000000000000;
  } else if constexpr (def == DeformationType::Random) {
    energy = 386.20859193800073431602;
    stresses << -2649.06320838188222790259, -261.71145510528948291100, -206.33958695080000000000;
    tangentModuli << 23049.50315614010680417061, 400.00000000000000000000, 380.31064437832927894222,
        400.00000000000000000000, 1743.73819065332503707955, 203.68655562167072105778, 380.31064437832927894222,
        203.68655562167072105778, 1406.33958695080000000000;
  } else {
    tangentModuli << 1200.0, 400.0, 400.0, 400.0, 1200.0, 400.0, 400.0, 400.0, 1200.0;
  }

  return std::make_tuple(energy, stresses, tangentModuli);
}

template <DeformationType def>
auto OgdenTotalResults() {
  using DEV                              = Ogden<3, PrincipalStretchTag::total>;
  using ST                               = typename DEV::ScalarType;
  using FD                               = typename DEV::FirstDerivative;
  using SD                               = typename DEV::SecondDerivative;
  auto [energy, stresses, tangentModuli] = initializeMaterialResults<ST, FD, SD>();

  if constexpr (def == DeformationType::UniaxialTensile) {
    energy = 30.11892638066439253852;
    stresses << 104.81337596088467916010, -64.04041303584074143925, -64.04041303584074143925;
    tangentModuli.diagonal() << 212.88843406789884938871, 510.30953622551532657892, 510.30953622551532657892;
  } else if constexpr (def == DeformationType::BiaxialTensile) {
    energy = 102.74586311674921045255;
    stresses << 104.81337596088467916010, 104.81337596088467916010, -322.02260147539755251397;
    tangentModuli.diagonal() << 212.88843406789884938871, 212.88843406789884938871, 1270.34336129008307343491;
  } else if constexpr (def == DeformationType::PureShear) {
    energy = 38.01387115054218563175;
    stresses << 104.81337596088467916010, 0.0, -137.80601871346158092286;
    tangentModuli.diagonal() << 212.88843406789884938871, 379.33333333333333333333, 689.36045988221131739993;
  } else if constexpr (def == DeformationType::Random) {
    energy = 68.67063501451988459659;
    stresses << -353.33185980594171105387, -19.57535627455401043006, 0.0;
    tangentModuli.diagonal() << 1388.24107716520584415931, 416.97743143791939937849, 379.33333333333333333333;
  } else {
    tangentModuli.diagonal() << 379.33333333333333333333, 379.33333333333333333333, 379.33333333333333333333;
  }

  return std::make_tuple(energy, stresses, tangentModuli);
}

template <DeformationType def>
auto OgdenDeviatoricResults() {
  using DEV                              = Ogden<3, PrincipalStretchTag::deviatoric>;
  using ST                               = typename DEV::ScalarType;
  using FD                               = typename DEV::FirstDerivative;
  using SD                               = typename DEV::SecondDerivative;
  auto [energy, stresses, tangentModuli] = initializeMaterialResults<ST, FD, SD>();

  if constexpr (def == DeformationType::UniaxialTensile) {
    energy = 30.11892638066439253852;
    stresses << 96.50011793037801997876, -77.37108713810282996547, -77.37108713810282996547;
    tangentModuli << 95.80588821863193557644, -133.28971931882038379099, -133.28971931882038379099,
        -133.28971931882038379099, 415.10457030541086130732, -110.80811991756241388905, -133.28971931882038379099,
        -110.80811991756241388905, 415.10457030541086130732;
  } else if constexpr (def == DeformationType::BiaxialTensile) {
    energy = 102.74586311674921045255;
    stresses << 76.68268938473846971177, 76.68268938473846971177, -394.35652679503083661755;
    tangentModuli << 115.99297598823256405885, -117.42880594546643821184, -140.23371403819243979711,
        -117.42880594546643821184, 115.99297598823256405885, -140.23371403819243979711, -140.23371403819243979711,
        -140.23371403819243979711, 1461.34852772808986654670;
  } else if constexpr (def == DeformationType::PureShear) {
    energy = 38.01387115054218563175;
    stresses << 94.34963137716988821177, -14.33533007968926359920, -157.44542092263587205377;
    tangentModuli << 97.99606203799660287929, -128.00466564299765028820, -137.82141189493178989945,
        -128.00466564299765028820, 272.91270269382182521559, -113.99904353601931958853, -137.82141189493178989945,
        -113.99904353601931958853, 630.55592429395508901223;
  } else if constexpr (def == DeformationType::Random) {
    energy = 50.09370709234731412577;
    stresses << -292.55484709377922248590, 65.45982001352621826955, 86.73605701180705803523;
    tangentModuli << 1391.84037121344593230118, -209.22160947512998563004, -217.27006808196210583474,
        -209.22160947512998563004, 253.12341905368689142693, -199.58457404338121600317, -217.27006808196210583474,
        -199.58457404338121600317, 213.66176741247654458553;
  } else {
    tangentModuli << 252.88888888888888888889, -126.44444444444444444444, -126.44444444444444444444,
        -126.44444444444444444444, 252.88888888888888888889, -126.44444444444444444444, -126.44444444444444444444,
        -126.44444444444444444444, 252.88888888888888888889;
  }

  return std::make_tuple(energy, stresses, tangentModuli);
}

template <DeformationType def>
auto MooneyRivlinResults() {
  using DEV                              = InvariantBased<2>;
  using ST                               = typename DEV::ScalarType;
  using FD                               = typename DEV::FirstDerivative;
  using SD                               = typename DEV::SecondDerivative;
  auto [energy, stresses, tangentModuli] = initializeMaterialResults<ST, FD, SD>();

  if constexpr (def == DeformationType::UniaxialTensile) {
    energy = 121.90949011668176248069;
    stresses << 386.21499887413357870351, -309.65635040458462163162, -309.65635040458462163162;
    tangentModuli << 373.48057794545052562510, -525.47278212438614017242, -525.47278212438614017242,
        -525.47278212438614017242, 1934.51279967558799675588, -729.45066601784266017843, -525.47278212438614017242,
        -729.45066601784266017843, 1934.51279967558799675588;
  } else if constexpr (def == DeformationType::BiaxialTensile) {
    energy = 525.20186547965993568310;
    stresses << 446.03321932715999883236, 446.03321932715999883236, -2293.81771323310168895519;
    tangentModuli << 425.31610125315631310095, -276.20728215016071749955, -1220.57115868209163554492,
        -276.20728215016071749955, 425.31610125315631310095, -1220.57115868209163554492, -1220.57115868209163554492,
        -1220.57115868209163554492, 10582.30508714855330666667;
  } else if constexpr (def == DeformationType::PureShear) {
    energy = 163.87737439394746656721;
    stresses << 392.43987270514783462247, 0.0, -736.57039708029197080292;
    tangentModuli << 378.87474698142929918583, -415.87629754970761825908, -679.00211057239774805974,
        -415.87629754970761825908, 1139.50105528619887402987, -780.55822287104622871046, -679.00211057239774805974,
        -780.55822287104622871046, 3352.88527066666666666667;
  } else if constexpr (def == DeformationType::Random) {
    energy = 237.00331601631236689126;
    stresses << -1493.51263569956765592339, 353.41016616513053872767, 424.50699129743702276257;
    tangentModuli << 8273.87329559774586080048, -1405.38867743465136021484, -1383.46856358354755927846,
        -1405.38867743465136021484, 968.50500037379697683587, -558.59512056371404316164, -1383.46856358354755927846,
        -558.59512056371404316164, 811.07705064098741844244;
  } else {
    tangentModuli << 1066.66666666666666666667, -533.33333333333333333333, -533.33333333333333333333,
        -533.33333333333333333333, 1066.66666666666666666667, -533.33333333333333333333, -533.33333333333333333333,
        -533.33333333333333333333, 1066.66666666666666666667;
  }

  return std::make_tuple(energy, stresses, tangentModuli);
}

template <DeformationType def>
auto YeohResults() {
  using DEV                              = InvariantBased<3>;
  using ST                               = typename DEV::ScalarType;
  using FD                               = typename DEV::FirstDerivative;
  using SD                               = typename DEV::SecondDerivative;
  auto [energy, stresses, tangentModuli] = initializeMaterialResults<ST, FD, SD>();

  if constexpr (def == DeformationType::UniaxialTensile) {
    energy = 80.00288803777098292870;
    stresses << 324.01215900542842959589, -259.78385856792941135538, -259.78385856792941135538;
    tangentModuli << 881.69445527195241486883, -896.54113174454283555591, -896.54113174454283555591,
        -896.54113174454283555591, 1603.41442022788936649282, 138.29784233284958193080, -896.54113174454283555591,
        138.29784233284958193080, 1603.41442022788936649282;
  } else if constexpr (def == DeformationType::BiaxialTensile) {
    energy = 428.29311952886920828531;
    stresses << 596.17233521166098333921, 596.17233521166098333921, -3065.93904532702020898444;
    tangentModuli << 1904.53058886430426857028, -736.54111932547034596339, -4122.26908242585572302637,
        -736.54111932547034596339, 1904.53058886430426857030, -4122.26908242585572302636, -4122.26908242585572302637,
        -4122.26908242585572302636, 26954.07893798022701218479;
  } else if constexpr (def == DeformationType::PureShear) {
    energy = 102.29747000765920970965;
    stresses << 347.75804876011292782372, -87.88341435317176704527, -532.30680405401063338032;
    tangentModuli << 973.56945425329663911122, -681.10213520628997229888, -1370.61111025674991101687,
        -681.10213520628997229888, 1038.91000029027657862787, -24.54582516514794286039, -1370.61111025674991101687,
        -24.54582516514794286039, 3335.38809487114115743735;
  } else if constexpr (def == DeformationType::Random) {
    energy = 136.47987445409677640455;
    stresses << -1092.05798328075205697252, 231.63217084641960222397, 335.86337250062840501195;
    tangentModuli << 9853.95005598487645546365, -1724.60974782569562663386, -2286.01627090622441307943,
        -1724.60974782569562663386, 1409.85366080207153364491, -693.88850807794018286940, -2286.01627090622441307943,
        -693.88850807794018286940, 1487.94654237393143076080;
  } else {
    tangentModuli << 533.33333333333333333333, -266.66666666666666666666, -266.66666666666666666666,
        -266.66666666666666666666, 533.33333333333333333333, -266.66666666666666666667, -266.66666666666666666666,
        -266.66666666666666666667, 533.33333333333333333333;
  }

  return std::make_tuple(energy, stresses, tangentModuli);
}

template <DeformationType def>
auto ArrudaBoyceResults() {
  using DEV                              = ArrudaBoyce;
  using ST                               = typename DEV::ScalarType;
  using FD                               = typename DEV::FirstDerivative;
  using SD                               = typename DEV::SecondDerivative;
  auto [energy, stresses, tangentModuli] = initializeMaterialResults<ST, FD, SD>();

  if constexpr (def == DeformationType::UniaxialTensile) {
    energy = 524.54862538242105375959;
    stresses << 1988.69538986984462737872, -1594.48016852967988142092, -1594.48016852967988142092;
    tangentModuli << 4126.90748137435938476498, -4472.69277118506230207374, -4472.69277118506230207374,
        -4472.69277118506230207374, 9015.46166037122522920299, 22.98868335268771547091, -4472.69277118506230207374,
        22.98868335268771547091, 9015.46166037122522920299;
  } else if constexpr (def == DeformationType::BiaxialTensile) {
    energy = 2191.99046713360430976354;
    stresses << 2385.14547407052138860285, 2385.14547407052138860285, -12266.10194037531476829620;
    tangentModuli << 6686.38090391698979164015, -3879.92662064814565410712, -11693.06418092915377384666,
        -3879.92662064814565410712, 6686.38090391698979164015, -11693.06418092915377384667, -11693.06418092915377384666,
        -11693.06418092915377384667, 83156.23805353987297629905;
  } else if constexpr (def == DeformationType::PureShear) {
    energy = 658.39391274278355524038;
    stresses << 2042.05956759641443613557, -516.05755137167219321275, -3125.74275704251935048139;
    tangentModuli << 4327.04858520995598389415, -3648.25220097672098310516, -5920.95358184954641682261,
        -3648.25220097672098310516, 6011.79202935209881686391, -681.75167881997686121202, -5920.95358184954641682261,
        -681.75167881997686121202, 16329.30515490503347975432;
  } else if constexpr (def == DeformationType::Random) {
    energy = 852.72289246637064400804;
    stresses << -6014.88814499584774654894, 1275.79452717173182172880, 1849.88402495199328930063;
    tangentModuli << 42603.12041357143690717313, -7023.41135557368824526120, -9001.62374851252549584879,
        -7023.41135557368824526120, 7240.19469006579541859135, -4583.16612785309903543991, -9001.62374851252549584879,
        -4583.16612785309903543991, 7091.45747433173917823620;
  } else {
    tangentModuli << 3604.54569430519339227509, -1802.27284715259669613755, -1802.27284715259669613755,
        -1802.27284715259669613755, 3604.54569430519339227509, -1802.27284715259669613755, -1802.27284715259669613755,
        -1802.27284715259669613755, 3604.54569430519339227509;
  }

  return std::make_tuple(energy, stresses, tangentModuli);
}

template <DeformationType def>
auto GentResults() {
  using DEV                              = Gent;
  using ST                               = typename DEV::ScalarType;
  using FD                               = typename DEV::FirstDerivative;
  using SD                               = typename DEV::SecondDerivative;
  auto [energy, stresses, tangentModuli] = initializeMaterialResults<ST, FD, SD>();

  if constexpr (def == DeformationType::UniaxialTensile) {
    energy = 72.34043359464113664969;
    stresses << 258.00935867209779639912, -206.86466504286796047868, -206.86466504286796047868;
    tangentModuli << 435.61536605929830113762, -500.26028470193858651451, -500.26028470193858651451,
        -500.26028470193858651451, 1105.49182314871729614098, -61.17361867571950981691, -500.26028470193858651451,
        -61.17361867571950981691, 1105.49182314871729614098;
  } else if constexpr (def == DeformationType::BiaxialTensile) {
    energy = 268.12944414040646621085;
    stresses << 265.05543552971960995710, 265.05543552971960995710, -1363.10217863130221644402;
    tangentModuli << 729.84307703928729091043, -444.36506804501488071708, -1231.54728180718008069638,
        -444.36506804501488071708, 729.84307703928729091043, -1231.54728180718008069638, -1231.54728180718008069638,
        -1231.54728180718008069638, 8891.89207450656697412151;
  } else if constexpr (def == DeformationType::PureShear) {
    energy = 89.48999765356977773820;
    stresses << 258.52231476031221855654, -65.33227279318552835617, -395.71531884696582916082;
    tangentModuli << 457.02851170536571479909, -438.92534485676469755950, -610.64466238766101387235,
        -438.92534485676469755950, 755.28870286105247929522, -121.42132943131606193708, -610.64466238766101387235,
        -121.42132943131606193708, 1854.59617497664714774114;
  } else if constexpr (def == DeformationType::Random) {
    energy = 113.70842282985518509845;
    stresses << -738.55336276373388084680, 156.65168088323625030316, 227.14272226123812516216;
    tangentModuli << 4594.07819437366723920503, -727.26430872955118714862, -909.36065169201799671476,
        -727.26430872955118714862, 860.34530338140853041371, -604.31296749612384751414, -909.36065169201799671476,
        -604.31296749612384751414, 810.48526032790231480755;
  } else {
    tangentModuli << 533.33333333333333333333, -266.66666666666666666667, -266.66666666666666666667,
        -266.66666666666666666667, 533.33333333333333333333, -266.66666666666666666667, -266.66666666666666666667,
        -266.66666666666666666667, 533.33333333333333333333;
  }

  return std::make_tuple(energy, stresses, tangentModuli);
}