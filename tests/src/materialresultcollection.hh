// SPDX-FileCopyrightText: 2021-2024 The Ikarus Developers mueller@ibb.uni-stuttgart.de
// SPDX-License-Identifier: LGPL-3.0-or-later

#pragma once

#include <Eigen/Core>

#include <ikarus/finiteelements/mechanics/materials.hh>
#include <ikarus/utils/makeenum.hh>

using namespace Ikarus;
using namespace Ikarus::Materials;

MAKE_ENUM(DeformationType, Undeformed, UniaxialTensile, BiaxialTensile, PureShear, Random);

template <typename ST, typename FD, typename SD>
auto initializeMaterialResults() {
  return std::make_tuple(ST{0.0}, FD::Zero().eval(), SD::Zero().eval());
}

template <DeformationType def>
auto BlatzKoResults() {
  using DEV                              = BlatzKo;
  using ST                               = typename DEV::ScalarType;
  using FD                               = typename DEV::FirstDerivative;
  using SD                               = typename DEV::SecondDerivative;
  auto [energy, stresses, tangentModuli] = initializeMaterialResults<ST, FD, SD>();

  if constexpr (def == DeformationType::UniaxialTensile) {
    energy = 54.55868719697373328361;
    stresses << -173.22955867865045161471, -173.22955867865045161471, 136.41067562485586381955;
    tangentModuli << 2455.04000, 548.0, 341.74306308670438274751, 548.0, 2455.04000, 341.74306308670438274751,
        341.74306308670438274751, 341.74306308670438274751, 241.07277829175228635987;
  } else if constexpr (def == DeformationType::BiaxialTensile) {
    energy = 317.66809639394746656721;
    stresses << -1893.982500243600000, 136.41067562485586381955, 136.41067562485586381955;
    tangentModuli << 18446.567350828851360, 548.0, 548.0, 548.0, 241.07277829175228635987, 213.11737439394746656721,
        548.0, 213.11737439394746656721, 241.07277829175228635987;
  } else if constexpr (def == DeformationType::PureShear) {
    energy = 81.93868719697373328361;
    stresses << -480.54120, 0.0, 136.41067562485586381955;
    tangentModuli << 4885.6457760000, 548.0, 400.0, 548.0, 1200.0, 291.97080291970802919708, 400.0,
        291.97080291970802919708, 241.07277829175228635987;
  } else if constexpr (def == DeformationType::Random) {
    energy = 81.43853963029545239641;
    stresses << -710.76386026085151066952, -146.02410881416528990632, -121.67615046554131134779;
    tangentModuli << 5623.85441445935362496558, 400.0, 390.03109844130597425098, 400.00000, 1477.22500535977548288012,
        285.43759781897739412441, 390.03109844130597425098, 285.43759781897739412441, 1321.67615046554131134779;
  } else {
    tangentModuli << 1200.0, 400.0, 400.0, 400.0, 1200.0, 400.0, 400.0, 400.0, 1200.0;
  }

  return std::make_tuple(energy, stresses, tangentModuli);
}

template <DeformationType def>
auto OgdenTotalResults() {
  using DEV                              = Ogden<3, PrincipalStretchTag::total>;
  using ST                               = typename DEV::ScalarType;
  using FD                               = typename DEV::FirstDerivative;
  using SD                               = typename DEV::SecondDerivative;
  auto [energy, stresses, tangentModuli] = initializeMaterialResults<ST, FD, SD>();

  if constexpr (def == DeformationType::UniaxialTensile) {
    energy = 30.11892638066439253852;
    stresses << -64.04041303584074143925, -64.04041303584074143925, 104.81337596088467916010;
    tangentModuli.diagonal() << 585.26691789982063081054, 585.26691789982063081054, 136.38232022783703978279;
  } else if constexpr (def == DeformationType::BiaxialTensile) {
    energy = 102.74586311674921045255;
    stresses << -322.02260147539755251397, 104.81337596088467916010, 104.81337596088467916010;
    tangentModuli.diagonal() << 1874.74758199925673974837, 136.38232022783703978279, 136.38232022783703978279;
  } else if constexpr (def == DeformationType::PureShear) {
    energy = 38.01387115054218563175;
    stresses << -137.80601871346158092286, 0.0, 104.81337596088467916010;
    tangentModuli.diagonal() << 878.15470551965368326425, 379.33333333333333333333, 136.38232022783703978279;
  } else if constexpr (def == DeformationType::Random) {
    energy = 19.22492540140806116410;
    stresses << -149.31304210072199610872, -9.67967151876127425524, 0.0;
    tangentModuli.diagonal() << 929.27792171584260115372, 407.61291331940502131823, 379.33333333333333333333;
  } else {
    tangentModuli.diagonal() << 379.33333333333333333333, 379.33333333333333333333, 379.33333333333333333333;
  }

  return std::make_tuple(energy, stresses, tangentModuli);
}

template <DeformationType def>
auto OgdenDeviatoricResults() {
  using DEV                              = Ogden<3, PrincipalStretchTag::deviatoric>;
  using ST                               = typename DEV::ScalarType;
  using FD                               = typename DEV::FirstDerivative;
  using SD                               = typename DEV::SecondDerivative;
  auto [energy, stresses, tangentModuli] = initializeMaterialResults<ST, FD, SD>();

  if constexpr (def == DeformationType::UniaxialTensile) {
    energy = 30.11892638066439253852;
    stresses << -77.37108713810282996547, -77.37108713810282996547, 96.50011793037801997876;
    tangentModuli << 505.66510597717411415639, -110.80811991756241388905, -133.28971931882038379099,
        -110.80811991756241388905, 505.66510597717411415639, -133.28971931882038379099, -133.28971931882038379099,
        -133.28971931882038379099, 25.36784593368447573792;
  } else if constexpr (def == DeformationType::BiaxialTensile) {
    energy = 102.74586311674921045255;
    stresses << -394.35652679503083661755, 76.68268938473846971177, 76.68268938473846971177;
    tangentModuli << 2201.51629286968324379418, -140.23371403819243979711, -140.23371403819243979711,
        -140.23371403819243979711, 60.02021001397090733493, -117.42880594546643821184, -140.23371403819243979711,
        -117.42880594546643821184, 60.02021001397090733493;
  } else if constexpr (def == DeformationType::PureShear) {
    energy = 38.01387115054218563175;
    stresses << -157.44542092263587205377, -14.33533007968926359920, 94.34963137716988821177;
    tangentModuli << 846.25615095796623372589, -113.99904353601931958853, -137.82141189493178989945,
        -113.99904353601931958853, 287.24803277351108881480, -128.00466564299765028820, -137.82141189493178989945,
        -128.00466564299765028820, 29.12771796706967717727;
  } else if constexpr (def == DeformationType::Random) {
    energy = 12.91548535350265217829;
    stresses << -108.96544359817898679151, 34.32155933680243633227, 44.29089744397990845154;
    tangentModuli << 752.20966612104635712816, -160.54608411586555235210, -162.29649934275489849718,
        -160.54608411586555235210, 212.84045403016670728847, -161.61438739574503128460, -162.29649934275489849718,
        -161.61438739574503128460, 184.81860497880616173914;
  } else {
    tangentModuli << 252.88888888888888888889, -126.44444444444444444444, -126.44444444444444444444,
        -126.44444444444444444444, 252.88888888888888888889, -126.44444444444444444444, -126.44444444444444444444,
        -126.44444444444444444444, 252.88888888888888888889;
  }

  return std::make_tuple(energy, stresses, tangentModuli);
}

template <DeformationType def>
auto MooneyRivlinResults() {
  using DEV                              = InvariantBased<2>;
  using ST                               = typename DEV::ScalarType;
  using FD                               = typename DEV::FirstDerivative;
  using SD                               = typename DEV::SecondDerivative;
  auto [energy, stresses, tangentModuli] = initializeMaterialResults<ST, FD, SD>();

  if constexpr (def == DeformationType::UniaxialTensile) {
    energy = 121.90949011668176248069;
    stresses << -309.65635040458462163162, -309.65635040458462163162, 386.21499887413357870351;
    tangentModuli << 2296.95626536901865369019, -729.45066601784266017843, -525.47278212438614017242,
        -729.45066601784266017843, 2296.95626536901865369019, -525.47278212438614017242, -525.47278212438614017242,
        -525.47278212438614017242, 91.57181964316324189991;
  } else if constexpr (def == DeformationType::BiaxialTensile) {
    energy = 525.20186547965993568310;
    stresses << -2293.81771323310168895519, 446.03321932715999883236, 446.03321932715999883236;
    tangentModuli << 14887.57155311576186666667, -1220.57115868209163554492, -1220.57115868209163554492,
        -1220.57115868209163554492, 99.74440831362346723791, -276.20728215016071749955, -1220.57115868209163554492,
        -276.20728215016071749955, 99.74440831362346723792;
  } else if constexpr (def == DeformationType::PureShear) {
    energy = 163.87737439394746656721;
    stresses << -736.57039708029197080292, 0.0, 392.43987270514783462247;
    tangentModuli << 4361.98671466666666666666, -780.55822287104622871046, -679.00211057239774805974,
        -780.55822287104622871046, 1139.50105528619887402987, -415.87629754970761825908, -679.00211057239774805974,
        -415.87629754970761825908, 92.42228515285423741761;
  } else if constexpr (def == DeformationType::Random) {
    energy = 57.19594661369827849443;
    stresses << -497.07226163783060206913, 160.69076629958137737700, 198.02179053786920035420;
    tangentModuli << 3637.56687394490182558591, -817.04619368544199446166, -804.91779173508567747484,
        -817.04619368544199446166, 829.32706835799143368202, -547.00064411432262090954, -804.91779173508567747484,
        -547.00064411432262090954, 711.70907639083643292532;
  } else {
    tangentModuli << 1066.66666666666666666667, -533.33333333333333333333, -533.33333333333333333333,
        -533.33333333333333333333, 1066.66666666666666666667, -533.33333333333333333333, -533.33333333333333333333,
        -533.33333333333333333333, 1066.66666666666666666667;
  }

  return std::make_tuple(energy, stresses, tangentModuli);
}

template <DeformationType def>
auto YeohResults() {
  using DEV                              = InvariantBased<3>;
  using ST                               = typename DEV::ScalarType;
  using FD                               = typename DEV::FirstDerivative;
  using SD                               = typename DEV::SecondDerivative;
  auto [energy, stresses, tangentModuli] = initializeMaterialResults<ST, FD, SD>();

  if constexpr (def == DeformationType::UniaxialTensile) {
    energy = 80.00288803777098292870;
    stresses << -259.78385856792941135538, -259.78385856792941135538, 324.01215900542842959589;
    tangentModuli << 1907.48363084653367624709, 138.29784233284958193081, -896.54113174454283555589,
        138.29784233284958193081, 1907.48363084653367624709, -896.54113174454283555589, -896.54113174454283555589,
        -896.54113174454283555589, 645.18922972054480202510;
  } else if constexpr (def == DeformationType::BiaxialTensile) {
    energy = 428.29311952886920828531;
    stresses << -3065.93904532702020898444, 596.17233521166098333921, 596.17233521166098333921;
    tangentModuli << 32708.53993215451124242787, -4122.26908242585572302637, -4122.26908242585572302637,
        -4122.26908242585572302637, 1469.36830038863931722780, -736.54111932547034596339, -4122.26908242585572302637,
        -736.54111932547034596339, 1469.36830038863931722780;
  } else if constexpr (def == DeformationType::PureShear) {
    energy = 102.29747000765920970965;
    stresses << -532.30680405401063338032, -87.88341435317176704527, 347.75804876011292782372;
    tangentModuli << 4064.64841642513572516840, -24.54582516514794286039, -1370.61111025674991101688,
        -24.54582516514794286039, 1126.79341464344834567314, -681.10213520628997229888, -1370.61111025674991101688,
        -681.10213520628997229888, 719.73146245759377208661;
  } else if constexpr (def == DeformationType::Random) {
    energy = 28.06028527116935575942;
    stresses << -249.33675986246261900969, 76.78585644723282499887, 103.05303462059473834986;
    tangentModuli << 1989.95324249196164161663, -441.85855061121129445909, -490.49872392111579527619,
        -441.85855061121129445909, 581.31331538687863498787, -405.08978208612167571802, -490.49872392111579527619,
        -405.08978208612167571802, 538.90490616810148726324;
  } else {
    tangentModuli << 533.33333333333333333333, -266.66666666666666666666, -266.66666666666666666666,
        -266.66666666666666666666, 533.33333333333333333333, -266.66666666666666666667, -266.66666666666666666666,
        -266.66666666666666666667, 533.33333333333333333333;
  }

  return std::make_tuple(energy, stresses, tangentModuli);
}

template <DeformationType def>
auto ArrudaBoyceResults() {
  using DEV                              = ArrudaBoyce;
  using ST                               = typename DEV::ScalarType;
  using FD                               = typename DEV::FirstDerivative;
  using SD                               = typename DEV::SecondDerivative;
  auto [energy, stresses, tangentModuli] = initializeMaterialResults<ST, FD, SD>();

  if constexpr (def == DeformationType::UniaxialTensile) {
    energy = 524.54862538242105375959;
    stresses << -1594.48016852967988142092, -1594.48016852967988142092, 1988.69538986984462737871;
    tangentModuli << 10881.75284899458091976656, 22.98868335268771547092, -4472.69277118506230207375,
        22.98868335268771547092, 10881.75284899458091976656, -4472.69277118506230207375, -4472.69277118506230207375,
        -4472.69277118506230207375, 2675.30500701680856186080;
  } else if constexpr (def == DeformationType::BiaxialTensile) {
    energy = 2191.99046713360430976354;
    stresses << -12266.10194037531476829619, 2385.14547407052138860285, 2385.14547407052138860285;
    tangentModuli << 106178.48478543030126491410, -11693.06418092915377384666, -11693.06418092915377384666,
        -11693.06418092915377384666, 4945.39880605529534740449, -3879.92662064814565410713, -11693.06418092915377384666,
        -3879.92662064814565410713, 4945.39880605529534740449;
  } else if constexpr (def == DeformationType::PureShear) {
    energy = 658.39391274278355524038;
    stresses << -3125.74275704251935048139, -516.05755137167219321275, 2042.05956759641443613557;
    tangentModuli << 20611.57273205328498991382, -681.75167881997686121202, -5920.95358184954641682261,
        -681.75167881997686121202, 6527.84958072377101007666, -3648.25220097672098310515, -5920.95358184954641682261,
        -3648.25220097672098310515, 2836.49415630746369474410;
  } else if constexpr (def == DeformationType::Random) {
    energy = 189.82141164574772780723;
    stresses << -1673.36302137169495200199, 515.32960007193422220512, 691.61537781016830673268;
    tangentModuli << 12902.96278681062846574447, -2826.18976574171429602356, -3104.99596695427480519398,
        -2826.18976574171429602356, 3858.46362084800107017320, -2776.20916669704648153362, -3104.99596695427480519398,
        -2776.20916669704648153362, 3539.49549646644558313106;
  } else {
    tangentModuli << 3604.54569430519339227509, -1802.27284715259669613755, -1802.27284715259669613755,
        -1802.27284715259669613755, 3604.54569430519339227509, -1802.27284715259669613755, -1802.27284715259669613755,
        -1802.27284715259669613755, 3604.54569430519339227509;
  }

  return std::make_tuple(energy, stresses, tangentModuli);
}

template <DeformationType def>
auto GentResults() {
  using DEV                              = Gent;
  using ST                               = typename DEV::ScalarType;
  using FD                               = typename DEV::FirstDerivative;
  using SD                               = typename DEV::SecondDerivative;
  auto [energy, stresses, tangentModuli] = initializeMaterialResults<ST, FD, SD>();

  if constexpr (def == DeformationType::UniaxialTensile) {
    energy = 72.34043359464113664969;
    stresses << -206.86466504286796047868, -206.86466504286796047868, 258.00935867209779639912;
    tangentModuli << 1347.62070579454747317173, -61.17361867571950981691, -500.26028470193858651451,
        -61.17361867571950981691, 1347.62070579454747317173, -500.26028470193858651451, -500.26028470193858651451,
        -500.26028470193858651451, 247.28736702856998259811;
  } else if constexpr (def == DeformationType::BiaxialTensile) {
    energy = 268.12944414040646621085;
    stresses << -1363.10217863130221644402, 265.05543552971960995710, 265.05543552971960995710;
    tangentModuli << 11450.29855357965810416529, -1231.54728180718008069638, -1231.54728180718008069638,
        -1231.54728180718008069638, 536.37195621467443692714, -444.36506804501488071708, -1231.54728180718008069638,
        -444.36506804501488071708, 536.37195621467443692715;
  } else if constexpr (def == DeformationType::PureShear) {
    energy = 89.48999765356977773820;
    stresses << -395.71531884696582916082, -65.33227279318552835617, 258.52231476031221855654;
    tangentModuli << 2396.72616179699033369146, -121.42132943131606193708, -610.64466238766101387235,
        -121.42132943131606193708, 820.62097565423800765139, -438.92534485676469755950, -610.64466238766101387235,
        -438.92534485676469755950, 268.32609217229110271402;
  } else if constexpr (def == DeformationType::Random) {
    energy = 27.30300488037605302263;
    stresses << -234.30692285440768020287, 72.15726133930562371294, 96.84107327808207177777;
    tangentModuli << 1702.72523000910358795582, -363.70953199886996888248, -391.79558209236391451262,
        -363.70953199886996888248, 530.40786772331416942041, -401.96249305964427529111, -391.79558209236391451262,
        -401.96249305964427529111, 477.84550966581385257621;
  } else {
    tangentModuli << 533.33333333333333333333, -266.66666666666666666667, -266.66666666666666666667,
        -266.66666666666666666667, 533.33333333333333333333, -266.66666666666666666667, -266.66666666666666666667,
        -266.66666666666666666667, 533.33333333333333333333;
  }

  return std::make_tuple(energy, stresses, tangentModuli);
}